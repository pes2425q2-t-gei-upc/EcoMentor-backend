package com.EcoMentor_backend.EcoMentor.Address.useCases.mapper;

import com.EcoMentor_backend.EcoMentor.Address.entity.Address;
import com.EcoMentor_backend.EcoMentor.Address.useCases.dto.AddressDTOWithOfficialCertificate;
import com.EcoMentor_backend.EcoMentor.Address.useCases.dto.AddressDTOWithoutCertificate;
import com.EcoMentor_backend.EcoMentor.Address.useCases.dto.CreateAddressDTO;
import com.EcoMentor_backend.EcoMentor.Address.useCases.dto.AddressDTO;
import com.EcoMentor_backend.EcoMentor.Certificate.entity.Certificate;
import com.EcoMentor_backend.EcoMentor.Certificate.entity.OfficialCertificate;
import com.EcoMentor_backend.EcoMentor.Certificate.infrastructure.repositories.CertificateRepository;
import com.EcoMentor_backend.EcoMentor.Certificate.infrastructure.repositories.OfficialCertificateRepository;
import com.EcoMentor_backend.EcoMentor.Certificate.useCases.dto.CertificateWithoutForeignEntitys;
import com.EcoMentor_backend.EcoMentor.Certificate.useCases.dto.OfficialCertificateWFE;
import org.springframework.stereotype.Component;
import org.locationtech.jts.geom.GeometryFactory;
import org.locationtech.jts.geom.Point;
import org.locationtech.jts.geom.Coordinate;

import java.util.List;
import java.util.stream.Collectors;

@Component
public class AddressMapper {
    private final CertificateRepository certificateRepository;
    private final OfficialCertificateRepository officialCertificateRepository;
    private final GeometryFactory geometryFactory = new GeometryFactory();


    public AddressMapper(CertificateRepository certificateRepository, OfficialCertificateRepository officialCertificateRepository) {
        this.certificateRepository = certificateRepository;
        this.officialCertificateRepository = officialCertificateRepository;
    }

    // Entity to DTO conversion. The id field is included in the DTO.
    public AddressDTO toDTO(Address address) {
        if (address == null) {
            return null;
        }
        return AddressDTO.builder()
                .addressId(address.getAddressId())
                .addressName(address.getAddressName())
                .addressNumber(address.getAddressNumber())
                .zipcode(address.getZipcode())
                .town(address.getTown())
                .region(address.getRegion())
                .province(address.getProvince())
                .longitude((float) address.getLocation().getX())
                .latitude((float) address.getLocation().getY())
                .certificates(address.getCertificates().stream()
                        .map(this::CertificateWFEToDTO)
                        .collect(Collectors.toList()))
                .build();
    }
    public AddressDTOWithOfficialCertificate toDTOWithOfficialCertificate(Address address) {
        if (address == null) {
            return null;
        }
        return AddressDTOWithOfficialCertificate.builder()
                .addressId(address.getAddressId())
                .addressName(address.getAddressName())
                .addressNumber(address.getAddressNumber())
                .zipcode(address.getZipcode())
                .town(address.getTown())
                .region(address.getRegion())
                .province(address.getProvince())
                .longitude((float) address.getLocation().getX())
                .latitude((float) address.getLocation().getY())
                .certificates(address.getCertificates().stream()
                        .map(certificate -> {
                            if (certificate instanceof OfficialCertificate) {
                                OfficialCertificate oc = (OfficialCertificate) certificate;
                                return OfficialCertificateWFEToDTO(oc);
                            } else {
                                // Si manejas otros tipos o deseas lanzar una excepción, hazlo aquí.
                                // Por ejemplo, podrías retornar null o mapearlo a otro DTO:
                                return null;
                            }
                        })
                        .collect(Collectors.toList()))
                .build();
    }


    // CreateDTO to Entity. CreateDTO does not have an id field because it is generated by the database.
    public Address toEntity(CreateAddressDTO dto) {
        if (dto == null) {
            return null;
        }
        Point location = geometryFactory.createPoint(new Coordinate(dto.getLongitude(), dto.getLatitude()));
        List<Certificate> certificates = dto.getCertificates().stream()
                .map(certificateRepository::findCertificateByCertificateId)
                .collect(Collectors.toList());

        return Address.builder()
                .addressName(dto.getAddressName())
                .addressNumber(dto.getAddressNumber())
                .zipcode(dto.getZipcode())
                .town(dto.getTown())
                .region(dto.getRegion())
                .province(dto.getProvince())
                .location(location)
                .certificates(certificates)
                .build();
    }


    public OfficialCertificateWFE OfficialCertificateWFEToDTO(OfficialCertificate certificate) {
        if (certificate == null) {
            System.out.println("Certificate is null");
            return null;
        }
        System.out.println("Certificate is not null");
        return OfficialCertificateWFE.builder()
                .certificateId(certificate.getCertificateId())
                .certificateType(certificate.getCertificateType())
                .documentId(certificate.getDocumentId())
                .floor(certificate.getFloor())
                .door(certificate.getDoor())
                .climateZone(certificate.getClimateZone())
                .cadastreMeters(certificate.getCadastreMeters())
                .buildingYear(certificate.getBuildingYear())
                .buildingUse(certificate.getBuildingUse())
                .nonRenewablePrimaryQualification(certificate.getNonRenewablePrimaryQualification())
                .nonRenewablePrimaryEnergy(certificate.getNonRenewablePrimaryEnergy())
                .co2Qualification(certificate.getCo2Qualification())
                .co2Emissions(certificate.getCo2Emissions())
                .finalEnergyConsumption(certificate.getFinalEnergyConsumption())
                .annualCost(certificate.getAnnualCost())
                .electricVehicle(certificate.isElectricVehicle())
                .solarThermal(certificate.isSolarThermal())
                .photovoltaicSolar(certificate.isPhotovoltaicSolar())
                .biomass(certificate.isBiomass())
                .districtNet(certificate.isDistrictNet())
                .geothermal(certificate.isGeothermal())
                .insulation(certificate.getInsulation())
                .windowEfficiency(certificate.getWindowEfficiency())
                .heatingQualification(certificate.getHeatingQualification())
                .heatingEmissions(certificate.getHeatingEmissions())
                .refrigerationQualification(certificate.getRefrigerationQualification())
                .refrigerationEmissions(certificate.getRefrigerationEmissions())
                .acsQualification(certificate.getAcsQualification())
                .acsEmissions(certificate.getAcsEmissions())
                .lightingQualification(certificate.getLightingQualification())
                .lightingEmissions(certificate.getLightingEmissions())
                .residentialUseVentilation(certificate.getResidentialUseVentilation())
                .energeticRehabilitation(certificate.isEnergeticRehabilitation())
                .entryDate(certificate.getEntryDate())
                .build();

    }


    public CertificateWithoutForeignEntitys CertificateWFEToDTO(Certificate certificate) {
        if (certificate == null) {
            return null;
        }
        return CertificateWithoutForeignEntitys.builder()
                .certificateId(certificate.getCertificateId())
                .certificateType(certificate.getCertificateType())
                .build();
    }


    public AddressDTOWithoutCertificate toDTOWithoutCertificate(Address address) {
        if (address == null) {
            return null;
        }
        return AddressDTOWithoutCertificate.builder()
                .addressId(address.getAddressId())
                .addressName(address.getAddressName())
                .addressNumber(address.getAddressNumber())
                .zipcode(address.getZipcode())
                .town(address.getTown())
                .region(address.getRegion())
                .province(address.getProvince())
                .longitude((float) address.getLocation().getX())
                .latitude((float) address.getLocation().getY())
                .build();
    }



}